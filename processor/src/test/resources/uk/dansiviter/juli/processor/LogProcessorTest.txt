package com.acme;

import com.oracle.svm.core.annotate.AutomaticFeature;
import java.lang.Override;
import java.lang.String;
import java.util.logging.Logger;
import javax.annotation.concurrent.ThreadSafe;
import org.graalvm.nativeimage.hosted.Feature;
import org.graalvm.nativeimage.hosted.RuntimeReflection;
import uk.dansiviter.juli.BaseLog;
import uk.dansiviter.juli.LogProducer;
import uk.dansiviter.juli.annotations.Log;
import uk.dansiviter.juli.annotations.Message;
import uk.dansiviter.juli.processor.LogProcessorTest;

/**
 * Auto-generated by <a href="https://gitlab.com/dansiviter/logging">uk.dansiviter.juli</a>.
 */
@ThreadSafe
public final class Foo$log implements BaseLog, LogProcessorTest {
  private final Log log;

  private final Logger delegate;

  public final String key;

  public Foo$log(String name) {
    this.log = LogProcessorTest.class.getAnnotation(Log.class);
    this.key = LogProducer.key(LogProcessorTest.class, name);
    this.delegate = delegate(name);
  }

  /**
   * @returns the annotation instance.
   */
  @Override
  public final Log log() {
    return this.log;
  }

  /**
   * @returns the delegate logger.
   */
  @Override
  public final Logger delegate() {
    return this.delegate;
  }

  @Override
  public void foo() {
    if (!isLoggable(Message.Level.INFO)) {
      return;
    }
    logp(Message.Level.INFO, "hello");
  }

  @AutomaticFeature
  public static final class GraalFeature implements Feature {
    @Override
    public final void beforeAnalysis(Feature.BeforeAnalysisAccess access) {
      var clazz = access.findClassByName("com.acme.Foo$log");
      RuntimeReflection.register(clazz);
      RuntimeReflection.register(clazz.getDeclaredConstructors());
      RuntimeReflection.register(clazz.getDeclaredFields());
      RuntimeReflection.register(clazz.getDeclaredMethods());
    }
  }
}
